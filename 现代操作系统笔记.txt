Day01
1、操作系统：为用户程序提供一个更好、更简单、更清晰的计算机模型，并管理计算机的所有设备

2、用户与计算机交互的程序：
	1、基于文本的通常称为shell
	2、基于图标的则称为图形用户界面
	3、上面提到的不属于操作系统一部分，但是是使用操作系统来工作的

3、多数计算机的两种运行模式：内核态和用户态
	
4、内核态：作为软件中最基础的部分操作系统运行在内核态上。在这个模式下，操作系统具有对所有硬件的完全访问权，可以执行机器上能够运行的任何指令
     用户态：软件的其余部分运行在用户态下。在这个模式下，只能使用机器指令的一个子集。

5、抽象：管理复杂性的一个关键。好的抽象可以把一个几乎不可能管理的任务划分为两个可以管理的部分。其中一部分是有关抽象的定义与实现，第二部分是随时用这些抽象解决问题
操作系统的任务是创建好的抽象并实现和管理它所创建的抽象对象

6、操作系统（作为拓展机器的）的一个主要任务就是隐藏硬件，呈现给程序良好、清晰、优雅、一致的抽象

7、操作系统（作为资源管理者的）用来管理一个复杂系统的各个部分。现代擦欧总系统运行同时在内存中运行多道程序
当一个计算机（或网络）有多个用户时，操作系统的主要任务是记录哪个程序在使用什么资源，对资源请求进行分配，评估使用代价，并且为不同的程序和用户调解相互冲突的资源请求

8、计算机硬件：
处理器（CPU）
	程序计数器、堆栈指针、程序状态字、超标量CPU
存储器
	CPU的寄存器、高速缓存、主存、磁盘（由上至下距离CPU的距离）
I/O设备实现输入输出的三种方式
	1、用户发出一个系统调用，内核将其翻译成一个对应设备驱动程序的过程的调用（忙等待）
	2、设备驱动程序启动设备并且让该设备在操作完成时发出一个中断（中断很重要）
	3、为I/O使用一种特殊的直接存储器访问芯片，它可以控制在内存和某些控制器之间的位流，而无须持续的CPU干预
总线

9、操作系统
	1、大型机操作系统（主要提供服务：批处理，事务处理，分时）
	2、服务器操作系统（主要提供服务：打印服务。文件服务，Web服务）
	3、多处理器操作系统
	4、个人计算机操作系统
	5、掌上计算机操作系统
	6、嵌入式操作系统
	7、传感器节点操作系统
	8、实时操作系统（硬实时系统、软实时系统）
	9、智能卡操作系统

10、操作系统概念
	1、进程：本质是正在执行的一个程序。
		地址空间：与进程相关，这是从某个最小值的存储位置到某个最大值的存储位置的列表。在这个地址空间，进程可以进行读写
		进程表：与一个进程有关的所有信息，除了该进程自身地址空间的内容以外，均存放在这个表内
		子进程：某个进程创建的进程
		进程间通信：合作完成某些作业的相关进程经常需要彼此通信以便同步他们的行为
	2、地址空间
	3、文件

11、用于进程管理的系统调用
	进程标识符PID
	fork,shell,waitpid,execve,exec
	cp主程序main(argc,argv,envp):
		argc:该命令行内有关参数数目的计数器，包括程序名称
		argv:一个指向数组的指针。该数组的元素i是指向该命令行第i个字符串的指针
		envp:一个指向环境的指针
			例子：      cp file1 file2 (下面是shell的程序解释)
					
				#define TRUE 1
				while(TRUE){              //一直循环下去
					type_prompt();                 //在屏幕上显示提示符                                      
					read_command(command,parameters);     //在终端读取输入
					if(fork() != 0) {        //派生子进程
						//父代码
						waitpid(-1, &status,0);
					}else{
						//子代码
						execve(command,parameters,0);   //执行命令
					}
				}
				其中argc=3(command, parameters,status)
				       argv[0]指向字符串"cp"，argv[1]指向字符串"file1", argv[2]指向字符串"file2"
	
	UNIX进程将其存储空间划分为三段：正文段（如程序代码）、数据段（如变量）以及堆栈段。

12、用于文件管理的系统调用
	打开文件：open()。
	这个系统调用通过绝对路径名或指向工作目录的相对路径名指定要打开文件的名称
	代码含义：O_RDONLY(只读), O_WRONLY(只写), O_RDWR(可读可写), O_CREAT参数(创建一个新文件), close(关闭文件)
	调用：read(), write(), lseek(), stat(), fstat()【没有包含参数，后续查全补齐】

13、用于目录管理的系统调用
	mkdir(创建空目录), rmdir(删除空目录), link(允许同一个文件以两个或多个名称出现，多数情形下是在不同的目录这样做), mount(允许将两个文件系统合并为一个)
		例子1：link("/usr/jim/memo","/usr/ast/note"); //jim目录中的文件memo以文件名note进入ast的目录，之后/usr/jim/memo和/usr/ast/note都引用相同的文件
		例子2：mount("/dev/sdb0","/mnt",0); //第一个参数是USB驱动器0的块特殊文件名称，第二个参数是要被安装树的位置，第三个参数说明将要安装的文件系统是可读写合适只读

14、各种系统调用
	chdir(改变当前的工作目录)
		例子：chdir("/usr/ast/test"); //调用之后，打开xyz文件，会打开/usr/ast/test/xyz
		工作目录的概念消除了总是键入（长）绝对路径名的需要
	chmod(每个文件有一个保护模式【该模式包针对所有者、组和其他用户的读-写-执行位】，该调用可以改变文件的模式)
		例子：chmod("file", 0644); //使一个文件对除了所有者之外的用户只读，可以执行
	kill()
	time()

15、Windows Win32 API

16、单体系统
	可装载的扩展（UNIX：共享库； Windows：动态链接库）

17、层次式系统
	THE操作系统的结构
		5层： 操作员
		4层： 用户程序
		3层： 输入/输出管理
		2层： 操作员-进程通信
		1层： 存储器和磁鼓管理
		0层： 处理器分配和多道程序设计

18、微内核
	代码密度
	微内核设计思想：
		为了实现高可靠性，将操作系统划分成小的，良好定义的模块，只有其中一个模块微内核运行在内核态，其余模块由于功能相对弱一些，则作为普通用户进程运行。
		特别地，由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使得整个系统死机


	
		

		
